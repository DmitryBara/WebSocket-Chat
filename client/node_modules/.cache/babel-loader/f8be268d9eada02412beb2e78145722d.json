{"ast":null,"code":"var _jsxFileName = \"/Users/dmitry/Desktop/JavaScript/express-chat/client/src/pages/OneChatPage.js\";\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useHttp } from '../hooks/http.hook';\nimport { AuthContext } from '../context/AuthContext';\nimport { Loader } from '../components/LoaderComp';\nimport { ChatWorker } from '../components/ChatWorkerComp'; // Initialize new socket when connect to new chatroom\n\nimport openSocket from 'socket.io-client'; // const socket = openSocket()\n// Logic block without component\n\nexport const OneChatPage = () => {\n  const {\n    token\n  } = useContext(AuthContext);\n  const {\n    request,\n    loading\n  } = useHttp();\n  const [chat, setChat] = useState(null);\n  const chatId = useParams().id; // catch param from route\n\n  const {\n    socket,\n    setSocket\n  } = useState(null);\n  const createSocket = useCallback(() => {\n    _ = openSocket();\n    setSocket(_);\n  }); // Take response with chat data from backend\n  // Put in {chat}\n\n  const getChat = useCallback(async () => {\n    try {\n      const fetched = await request(`/api/chat/chatrooms/${chatId}`, 'GET', null, {\n        Authorization: `Bearer ${token}`\n      });\n      setChat(fetched);\n    } catch (e) {}\n  }, [token, chatId, request]); // call getChat() when component is ready\n\n  useEffect(() => {\n    getChat();\n    createSocket();\n    console.log(12241212412412);\n  }, [getChat]); // if still loading data from backend\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, \"OLOLOLOLO\", !loading && chat && socket && /*#__PURE__*/React.createElement(ChatWorker, {\n    chat: chat,\n    token: token,\n    chatId: chatId,\n    socket: socket,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 39\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/dmitry/Desktop/JavaScript/express-chat/client/src/pages/OneChatPage.js"],"names":["React","useCallback","useContext","useEffect","useState","useParams","useHttp","AuthContext","Loader","ChatWorker","openSocket","OneChatPage","token","request","loading","chat","setChat","chatId","id","socket","setSocket","createSocket","_","getChat","fetched","Authorization","e","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,WAAf,EAA4BC,UAA5B,EAAwCC,SAAxC,EAAmDC,QAAnD,QAAkE,OAAlE;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,SAAQC,OAAR,QAAsB,oBAAtB;AACA,SAAQC,WAAR,QAA0B,wBAA1B;AACA,SAAQC,MAAR,QAAqB,0BAArB;AACA,SAAQC,UAAR,QAAyB,8BAAzB,C,CAEA;;AACA,OAAOC,UAAP,MAAuB,kBAAvB,C,CACA;AAGA;;AACA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAE/B,QAAM;AAACC,IAAAA;AAAD,MAAUV,UAAU,CAACK,WAAD,CAA1B;AACA,QAAM;AAACM,IAAAA,OAAD;AAAUC,IAAAA;AAAV,MAAqBR,OAAO,EAAlC;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAMa,MAAM,GAAGZ,SAAS,GAAGa,EAA3B,CAL+B,CAKD;;AAE9B,QAAM;AAACC,IAAAA,MAAD;AAASC,IAAAA;AAAT,MAAsBhB,QAAQ,CAAC,IAAD,CAApC;AAEA,QAAMiB,YAAY,GAAGpB,WAAW,CAAE,MAAM;AACtCqB,IAAAA,CAAC,GAAGZ,UAAU,EAAd;AACAU,IAAAA,SAAS,CAACE,CAAD,CAAT;AACD,GAH+B,CAAhC,CAT+B,CAc/B;AACA;;AACA,QAAMC,OAAO,GAAGtB,WAAW,CAAC,YAAY;AACtC,QAAI;AACF,YAAMuB,OAAO,GAAG,MAAMX,OAAO,CAC1B,uBAAsBI,MAAO,EADH,EAE3B,KAF2B,EAG3B,IAH2B,EAI3B;AAACQ,QAAAA,aAAa,EAAG,UAASb,KAAM;AAAhC,OAJ2B,CAA7B;AAMFI,MAAAA,OAAO,CAACQ,OAAD,CAAP;AACC,KARD,CAQE,OAAOE,CAAP,EAAU,CAAE;AACf,GAV0B,EAUxB,CAACd,KAAD,EAAQK,MAAR,EAAgBJ,OAAhB,CAVwB,CAA3B,CAhB+B,CA4B/B;;AACAV,EAAAA,SAAS,CAAC,MAAM;AACdoB,IAAAA,OAAO;AACPF,IAAAA,YAAY;AACZM,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACD,GAJQ,EAIN,CAACL,OAAD,CAJM,CAAT,CA7B+B,CAmC/B;;AACA,MAAIT,OAAJ,EAAa;AACX,wBAAO,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,sBACE,uDAEI,CAACA,OAAD,IAAYC,IAAZ,IAAoBI,MAApB,iBAA8B,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAEJ,IAAlB;AAAwB,IAAA,KAAK,EAAEH,KAA/B;AAAsC,IAAA,MAAM,EAAEK,MAA9C;AAAsD,IAAA,MAAM,EAAEE,MAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFlC,CADF;AAMD,CA9CM","sourcesContent":["import React, {useCallback, useContext, useEffect, useState} from 'react'\nimport {useParams} from 'react-router-dom'\nimport {useHttp} from '../hooks/http.hook'\nimport {AuthContext} from '../context/AuthContext'\nimport {Loader} from '../components/LoaderComp'\nimport {ChatWorker} from '../components/ChatWorkerComp'\n\n// Initialize new socket when connect to new chatroom\nimport openSocket from 'socket.io-client'\n// const socket = openSocket()\n\n\n// Logic block without component\nexport const OneChatPage = () => {\n\n  const {token} = useContext(AuthContext)\n  const {request, loading} = useHttp()\n  const [chat, setChat] = useState(null)\n  const chatId = useParams().id // catch param from route\n\n  const {socket, setSocket} = useState(null)\n\n  const createSocket = useCallback( () => {\n    _ = openSocket()\n    setSocket(_)\n  })\n\n  // Take response with chat data from backend\n  // Put in {chat}\n  const getChat = useCallback(async () => {\n    try {\n      const fetched = await request (\n        `/api/chat/chatrooms/${chatId}`,\n        'GET',\n        null,\n        {Authorization: `Bearer ${token}`}\n      )\n    setChat(fetched) \n    } catch (e) {}\n  }, [token, chatId, request])\n\n  // call getChat() when component is ready\n  useEffect(() => {\n    getChat()\n    createSocket()\n    console.log(12241212412412)\n  }, [getChat])\n\n  // if still loading data from backend\n  if (loading) {\n    return <Loader />\n  }\n\n  return (\n    <>  \n      OLOLOLOLO\n      { !loading && chat && socket && <ChatWorker chat={chat} token={token} chatId={chatId} socket={socket}/> }\n    </>\n  )\n}"]},"metadata":{},"sourceType":"module"}