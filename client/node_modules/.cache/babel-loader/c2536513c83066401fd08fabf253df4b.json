{"ast":null,"code":"var _jsxFileName = \"/Users/dmitry/Desktop/JavaScript/express-chat/client/src/pages/OneChatPage.js\";\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useHttp } from '../hooks/http.hook';\nimport { AuthContext } from '../context/AuthContext';\nimport { Loader } from '../components/LoaderComp';\nimport { ChatWorker } from '../components/ChatWorkerComp'; // Initialize new socket when connect to new chatroom\n\nimport openSocket from 'socket.io-client';\nconst socket = openSocket(); // Logic block without component\n\nexport const OneChatPage = () => {\n  const {\n    token\n  } = useContext(AuthContext);\n  const {\n    request,\n    loading\n  } = useHttp();\n  const [chat, setChat] = useState(null);\n  const chatId = useParams().id; // catch param from route\n  // Take response with chat data from backend\n  // Put in {chat}\n\n  const getChat = useCallback(async () => {\n    try {\n      const fetched = await request(`/api/chat/chatrooms/${chatId}`, 'GET', null, {\n        Authorization: `Bearer ${token}`\n      });\n      setChat(fetched);\n    } catch (e) {}\n  }, [token, chatId, request]); // call getChat() when component is ready\n\n  useEffect(() => {\n    getChat();\n  }, [getChat]); // Save buffer for all messages from chat\n\n  var allMsgs = [];\n\n  const allMessages = newMessage => {\n    // if ( !allMsgs.length && !newMessage.length) {\n    // return 'Not ready'\n    // }\n    if (!allMsgs.length) {\n      console.log(newMessage);\n      console.log(allMsgs);\n    }\n\n    if (newMessage.length > 1) {\n      allMsgs.concat(...newMessage);\n    } else {\n      console.log(newMessage);\n      allMsgs.push(newMessage);\n    }\n\n    return allMsgs;\n  }; // If still loading data from backend\n\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, !loading && chat && /*#__PURE__*/React.createElement(ChatWorker, {\n    allMessages: allMessages,\n    chat: chat,\n    socket: socket,\n    token: token,\n    chatId: chatId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 29\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/dmitry/Desktop/JavaScript/express-chat/client/src/pages/OneChatPage.js"],"names":["React","useCallback","useContext","useEffect","useState","useParams","useHttp","AuthContext","Loader","ChatWorker","openSocket","socket","OneChatPage","token","request","loading","chat","setChat","chatId","id","getChat","fetched","Authorization","e","allMsgs","allMessages","newMessage","length","console","log","concat","push"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,WAAf,EAA4BC,UAA5B,EAAwCC,SAAxC,EAAmDC,QAAnD,QAAkE,OAAlE;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,SAAQC,OAAR,QAAsB,oBAAtB;AACA,SAAQC,WAAR,QAA0B,wBAA1B;AACA,SAAQC,MAAR,QAAqB,0BAArB;AACA,SAAQC,UAAR,QAAyB,8BAAzB,C,CAEA;;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,MAAMC,MAAM,GAAGD,UAAU,EAAzB,C,CAGA;;AACA,OAAO,MAAME,WAAW,GAAG,MAAM;AAE/B,QAAM;AAACC,IAAAA;AAAD,MAAUX,UAAU,CAACK,WAAD,CAA1B;AACA,QAAM;AAACO,IAAAA,OAAD;AAAUC,IAAAA;AAAV,MAAqBT,OAAO,EAAlC;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAMc,MAAM,GAAGb,SAAS,GAAGc,EAA3B,CAL+B,CAKD;AAG9B;AACA;;AACA,QAAMC,OAAO,GAAGnB,WAAW,CAAC,YAAY;AACtC,QAAI;AACF,YAAMoB,OAAO,GAAG,MAAMP,OAAO,CAC1B,uBAAsBI,MAAO,EADH,EAE3B,KAF2B,EAG3B,IAH2B,EAI3B;AAACI,QAAAA,aAAa,EAAG,UAAST,KAAM;AAAhC,OAJ2B,CAA7B;AAMFI,MAAAA,OAAO,CAACI,OAAD,CAAP;AACC,KARD,CAQE,OAAOE,CAAP,EAAU,CAAE;AACf,GAV0B,EAUxB,CAACV,KAAD,EAAQK,MAAR,EAAgBJ,OAAhB,CAVwB,CAA3B,CAV+B,CAsB/B;;AACAX,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,OAAO;AACR,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT,CAvB+B,CA2B/B;;AACA,MAAII,OAAO,GAAG,EAAd;;AACA,QAAMC,WAAW,GAAIC,UAAD,IAAgB;AAClC;AACE;AACF;AACA,QAAK,CAACF,OAAO,CAACG,MAAd,EAAuB;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACD;;AACD,QAAIE,UAAU,CAACC,MAAX,GAAoB,CAAxB,EAA2B;AACzBH,MAAAA,OAAO,CAACM,MAAR,CAAe,GAAGJ,UAAlB;AACD,KAFD,MAEO;AACLE,MAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ;AACAF,MAAAA,OAAO,CAACO,IAAR,CAAaL,UAAb;AACD;;AACD,WAAOF,OAAP;AACD,GAfD,CA7B+B,CA8C/B;;;AACA,MAAIT,OAAJ,EAAa;AACX,wBAAO,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,sBACE,0CACI,CAACA,OAAD,IAAYC,IAAZ,iBAAoB,oBAAC,UAAD;AAAY,IAAA,WAAW,EAAES,WAAzB;AACpB,IAAA,IAAI,EAAET,IADc;AACR,IAAA,MAAM,EAAEL,MADA;AACQ,IAAA,KAAK,EAAEE,KADf;AACsB,IAAA,MAAM,EAAEK,MAD9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADxB,CADF;AAMD,CAzDM","sourcesContent":["import React, {useCallback, useContext, useEffect, useState} from 'react'\nimport {useParams} from 'react-router-dom'\nimport {useHttp} from '../hooks/http.hook'\nimport {AuthContext} from '../context/AuthContext'\nimport {Loader} from '../components/LoaderComp'\nimport {ChatWorker} from '../components/ChatWorkerComp'\n\n// Initialize new socket when connect to new chatroom\nimport openSocket from 'socket.io-client'\nconst socket = openSocket()\n\n\n// Logic block without component\nexport const OneChatPage = () => {\n\n  const {token} = useContext(AuthContext)\n  const {request, loading} = useHttp()\n  const [chat, setChat] = useState(null)\n  const chatId = useParams().id // catch param from route\n\n\n  // Take response with chat data from backend\n  // Put in {chat}\n  const getChat = useCallback(async () => {\n    try {\n      const fetched = await request (\n        `/api/chat/chatrooms/${chatId}`,\n        'GET',\n        null,\n        {Authorization: `Bearer ${token}`}\n      )\n    setChat(fetched) \n    } catch (e) {}\n  }, [token, chatId, request])\n\n  // call getChat() when component is ready\n  useEffect(() => {\n    getChat()\n  }, [getChat])\n\n  // Save buffer for all messages from chat\n  var allMsgs = []\n  const allMessages = (newMessage) => {\n    // if ( !allMsgs.length && !newMessage.length) {\n      // return 'Not ready'\n    // }\n    if ( !allMsgs.length ) {\n      console.log(newMessage)\n      console.log(allMsgs)\n    }\n    if (newMessage.length > 1) {\n      allMsgs.concat(...newMessage)\n    } else {\n      console.log(newMessage)\n      allMsgs.push(newMessage)\n    }\n    return allMsgs\n  }\n\n  // If still loading data from backend\n  if (loading) {\n    return <Loader />\n  }\n\n  return (\n    <>  \n      { !loading && chat && <ChatWorker allMessages={allMessages} \n        chat={chat} socket={socket} token={token} chatId={chatId}/> }\n    </>\n  )\n}"]},"metadata":{},"sourceType":"module"}