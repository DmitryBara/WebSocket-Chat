{"ast":null,"code":"import { useState, useCallback } from 'react'; // create new hook\n\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n    setLoading(true);\n\n    try {\n      // stringify body if is. else body = null\n      if (body) {\n        body = JSON.stringify(body);\n        headers['Content-Type'] = 'application/json';\n      }\n\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n      const data = await response.json(); // error in response\n\n      if (!response.ok) {\n        // throw new Error (data.message || 'Some error') }\n        data.errors.forEach(element => {\n          console.log(element);\n        });\n      }\n\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n      throw e;\n    }\n  }, []);\n  const clearError = useCallback(() => setError(null), []);\n  return {\n    loading,\n    error,\n    request,\n    clearError\n  };\n};","map":{"version":3,"sources":["/Users/dmitry/Desktop/JavaScript/express-chat/client/src/hooks/http.hook.js"],"names":["useState","useCallback","useHttp","loading","setLoading","error","setError","request","url","method","body","headers","JSON","stringify","response","fetch","data","json","ok","errors","forEach","element","console","log","e","message","clearError"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,WAAlB,QAAoC,OAApC,C,CAEA;;AACA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAC3B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMO,OAAO,GAAGN,WAAW,CAAE,OAAOO,GAAP,EAAYC,MAAM,GAAG,KAArB,EAA4BC,IAAI,GAAG,IAAnC,EAAyCC,OAAO,GAAG,EAAnD,KAA0D;AACrFP,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACF;AACA,UAAIM,IAAJ,EAAU;AACRA,QAAAA,IAAI,GAAGE,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAP;AACAC,QAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,kBAA1B;AACD;;AACD,YAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAD,EAAM;AAACC,QAAAA,MAAD;AAASC,QAAAA,IAAT;AAAeC,QAAAA;AAAf,OAAN,CAA5B;AACA,YAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB,CAPE,CASF;;AACA,UAAI,CAACH,QAAQ,CAACI,EAAd,EAAkB;AAChB;AAEAF,QAAAA,IAAI,CAACG,MAAL,CAAYC,OAAZ,CAAoBC,OAAO,IAAI;AAC5BC,UAAAA,OAAO,CAACC,GAAR,CAAaF,OAAb;AACF,SAFD;AAIC;;AAGHjB,MAAAA,UAAU,CAAC,KAAD,CAAV;AAEA,aAAOY,IAAP;AAED,KAxBD,CAwBE,OAAOQ,CAAP,EAAU;AACVpB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAACkB,CAAC,CAACC,OAAH,CAAR;AACA,YAAMD,CAAN;AACD;AACF,GA/B0B,EA+BxB,EA/BwB,CAA3B;AAiCA,QAAME,UAAU,GAAGzB,WAAW,CAAE,MAAMK,QAAQ,CAAC,IAAD,CAAhB,EAAwB,EAAxB,CAA9B;AAEA,SAAO;AAAEH,IAAAA,OAAF;AAAWE,IAAAA,KAAX;AAAkBE,IAAAA,OAAlB;AAA2BmB,IAAAA;AAA3B,GAAP;AACD,CAxCM","sourcesContent":["import {useState, useCallback} from 'react'\n\n// create new hook\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(null)\n\n  const request = useCallback (async (url, method = 'GET', body = null, headers = {}) => {\n    setLoading(true)\n    try {\n      // stringify body if is. else body = null\n      if (body) { \n        body = JSON.stringify(body)\n        headers['Content-Type'] = 'application/json'\n      }\n      const response = await fetch(url, {method, body, headers})\n      const data = await response.json()\n\n      // error in response\n      if (!response.ok) {\n        // throw new Error (data.message || 'Some error') }\n\n        data.errors.forEach(element => {\n           console.log (element)\n        });\n\n        }\n      \n\n      setLoading(false)\n\n      return data\n\n    } catch (e) {\n      setLoading(false)\n      setError(e.message)\n      throw e\n    }\n  }, [])\n\n  const clearError = useCallback (() => setError(null), [])\n\n  return { loading, error, request, clearError }\n}\n\n"]},"metadata":{},"sourceType":"module"}