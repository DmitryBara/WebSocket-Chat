{"ast":null,"code":"var _jsxFileName = \"/Users/dmitry/Desktop/JavaScript/express-chat/client/src/pages/OneChatPage.js\";\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useHttp } from '../hooks/http.hook';\nimport { AuthContext } from '../context/AuthContext';\nimport { Loader } from '../components/LoaderComp';\nimport { ChatWorker } from '../components/ChatWorkerComp'; // Initialize new socket when connect to new chatroom\n\nimport openSocket from 'socket.io-client'; // const socket = openSocket()\n\nfunction init() {\n  return {\n    x: 'asgsd'\n  };\n} // var mySingleton = {\n//   getInstance: function () {\n//     if ( !mySingleton.instance )\n//       mySingleton.instance = init();\n//     }\n//     return mySingleton.instance\n//   }\n// }\n\n\nvar mySingleton = function () {\n  var instance;\n  return {\n    getInstance: function () {\n      if (!instance) {\n        instance = {\n          x: Math.random()\n        };\n      }\n\n      return instance;\n    }\n  };\n}(); // Logic block without component\n\n\nexport const OneChatPage = () => {\n  const {\n    token\n  } = useContext(AuthContext);\n  const {\n    request,\n    loading\n  } = useHttp();\n  const [chat, setChat] = useState(null);\n  const chatId = useParams().id; // catch param from route\n  // Take response with chat data from backend\n  // Put in {chat}\n\n  const getChat = useCallback(async () => {\n    try {\n      const fetched = await request(`/api/chat/chatrooms/${chatId}`, 'GET', null, {\n        Authorization: `Bearer ${token}`\n      });\n      setChat(fetched);\n    } catch (e) {}\n  }, [token, chatId, request]); // call getChat() when component is ready\n\n  useEffect(() => {\n    getChat();\n  }, [getChat]); // if still loading data from backend\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, \"OLOLOLOLO\", !loading && chat && /*#__PURE__*/React.createElement(ChatWorker, {\n    chat: chat,\n    token: token,\n    chatId: chatId,\n    socket: socket,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 29\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/dmitry/Desktop/JavaScript/express-chat/client/src/pages/OneChatPage.js"],"names":["React","useCallback","useContext","useEffect","useState","useParams","useHttp","AuthContext","Loader","ChatWorker","openSocket","init","x","mySingleton","instance","getInstance","Math","random","OneChatPage","token","request","loading","chat","setChat","chatId","id","getChat","fetched","Authorization","e","socket"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,WAAf,EAA4BC,UAA5B,EAAwCC,SAAxC,EAAmDC,QAAnD,QAAkE,OAAlE;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,SAAQC,OAAR,QAAsB,oBAAtB;AACA,SAAQC,WAAR,QAA0B,wBAA1B;AACA,SAAQC,MAAR,QAAqB,0BAArB;AACA,SAAQC,UAAR,QAAyB,8BAAzB,C,CAEA;;AACA,OAAOC,UAAP,MAAuB,kBAAvB,C,CACA;;AAGA,SAASC,IAAT,GAAe;AACb,SAAO;AAACC,IAAAA,CAAC,EAAC;AAAH,GAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,IAAIC,WAAW,GAAI,YAAU;AAC3B,MAAIC,QAAJ;AACA,SAAO;AACLC,IAAAA,WAAW,EAAE,YAAY;AACvB,UAAK,CAACD,QAAN,EAAiB;AACfA,QAAAA,QAAQ,GAAG;AAACF,UAAAA,CAAC,EAACI,IAAI,CAACC,MAAL;AAAH,SAAX;AACD;;AACD,aAAOH,QAAP;AACD;AANI,GAAP;AAQD,CAViB,EAAlB,C,CAYA;;;AACA,OAAO,MAAMI,WAAW,GAAG,MAAM;AAE/B,QAAM;AAACC,IAAAA;AAAD,MAAUjB,UAAU,CAACK,WAAD,CAA1B;AACA,QAAM;AAACa,IAAAA,OAAD;AAAUC,IAAAA;AAAV,MAAqBf,OAAO,EAAlC;AACA,QAAM,CAACgB,IAAD,EAAOC,OAAP,IAAkBnB,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAMoB,MAAM,GAAGnB,SAAS,GAAGoB,EAA3B,CAL+B,CAKD;AAE9B;AACA;;AACA,QAAMC,OAAO,GAAGzB,WAAW,CAAC,YAAY;AACtC,QAAI;AACF,YAAM0B,OAAO,GAAG,MAAMP,OAAO,CAC1B,uBAAsBI,MAAO,EADH,EAE3B,KAF2B,EAG3B,IAH2B,EAI3B;AAACI,QAAAA,aAAa,EAAG,UAAST,KAAM;AAAhC,OAJ2B,CAA7B;AAMFI,MAAAA,OAAO,CAACI,OAAD,CAAP;AACC,KARD,CAQE,OAAOE,CAAP,EAAU,CAAE;AACf,GAV0B,EAUxB,CAACV,KAAD,EAAQK,MAAR,EAAgBJ,OAAhB,CAVwB,CAA3B,CAT+B,CAqB/B;;AACAjB,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,OAAO;AACR,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT,CAtB+B,CA0B/B;;AACA,MAAIL,OAAJ,EAAa;AACX,wBAAO,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,sBACE,uDAEI,CAACA,OAAD,IAAYC,IAAZ,iBAAoB,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAEA,IAAlB;AAAwB,IAAA,KAAK,EAAEH,KAA/B;AAAsC,IAAA,MAAM,EAAEK,MAA9C;AAAsD,IAAA,MAAM,EAAEM,MAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFxB,CADF;AAMD,CArCM","sourcesContent":["import React, {useCallback, useContext, useEffect, useState} from 'react'\nimport {useParams} from 'react-router-dom'\nimport {useHttp} from '../hooks/http.hook'\nimport {AuthContext} from '../context/AuthContext'\nimport {Loader} from '../components/LoaderComp'\nimport {ChatWorker} from '../components/ChatWorkerComp'\n\n// Initialize new socket when connect to new chatroom\nimport openSocket from 'socket.io-client'\n// const socket = openSocket()\n\n\nfunction init(){\n  return {x:'asgsd'};\n}\n\n// var mySingleton = {\n//   getInstance: function () {\n//     if ( !mySingleton.instance )\n//       mySingleton.instance = init();\n//     }\n//     return mySingleton.instance\n//   }\n// }\n\nvar mySingleton = (function(){\n  var instance;\n  return {\n    getInstance: function () {\n      if ( !instance ) {\n        instance = {x:Math.random()};\n      }\n      return instance;\n    }\n  }\n})();\n\n// Logic block without component\nexport const OneChatPage = () => {\n\n  const {token} = useContext(AuthContext)\n  const {request, loading} = useHttp()\n  const [chat, setChat] = useState(null)\n  const chatId = useParams().id // catch param from route\n\n  // Take response with chat data from backend\n  // Put in {chat}\n  const getChat = useCallback(async () => {\n    try {\n      const fetched = await request (\n        `/api/chat/chatrooms/${chatId}`,\n        'GET',\n        null,\n        {Authorization: `Bearer ${token}`}\n      )\n    setChat(fetched) \n    } catch (e) {}\n  }, [token, chatId, request])\n\n  // call getChat() when component is ready\n  useEffect(() => {\n    getChat()\n  }, [getChat])\n\n  // if still loading data from backend\n  if (loading) {\n    return <Loader />\n  }\n\n  return (\n    <>  \n      OLOLOLOLO\n      { !loading && chat && <ChatWorker chat={chat} token={token} chatId={chatId} socket={socket}/> }\n    </>\n  )\n}"]},"metadata":{},"sourceType":"module"}