{"ast":null,"code":"import { useState } from 'react'; // create new hook\n\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n    setLoading(true);\n\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n      const data = await response.json(); // error in response\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Some error');\n      }\n\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n      throw e;\n    }\n  }, []);\n\n  const clearError = () => setError(null);\n\n  return {\n    loading,\n    error,\n    request,\n    clearError\n  };\n};","map":{"version":3,"sources":["/Users/dmitry/Desktop/JavaScript/express-chat/client/src/hooks/http.hook.js"],"names":["useState","useHttp","loading","setLoading","error","setError","request","useCallback","url","method","body","headers","response","fetch","data","json","ok","Error","message","e","clearError"],"mappings":"AAAA,SAAQA,QAAR,QAAuB,OAAvB,C,CAEA;;AACA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAC3B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBH,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMM,OAAO,GAAGC,WAAW,CAAE,OAAOC,GAAP,EAAYC,MAAM,GAAG,KAArB,EAA4BC,IAAI,GAAG,IAAnC,EAAyCC,OAAO,GAAG,EAAnD,KAA0D;AACrFR,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACF,YAAMS,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAD,EAAM;AAACC,QAAAA,MAAD;AAASC,QAAAA,IAAT;AAAeC,QAAAA;AAAf,OAAN,CAA5B;AACA,YAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB,CAFE,CAIF;;AACA,UAAI,CAACH,QAAQ,CAACI,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAWH,IAAI,CAACI,OAAL,IAAgB,YAA3B,CAAN;AACD;;AAEDf,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA,aAAOW,IAAP;AAED,KAZD,CAYE,OAAOK,CAAP,EAAU;AACVhB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAACc,CAAC,CAACD,OAAH,CAAR;AACA,YAAMC,CAAN;AACD;AACF,GAnB0B,EAmBxB,EAnBwB,CAA3B;;AAqBA,QAAMC,UAAU,GAAG,MAAMf,QAAQ,CAAC,IAAD,CAAjC;;AAEA,SAAO;AAAEH,IAAAA,OAAF;AAAWE,IAAAA,KAAX;AAAkBE,IAAAA,OAAlB;AAA2Bc,IAAAA;AAA3B,GAAP;AACD,CA5BM","sourcesContent":["import {useState} from 'react'\n\n// create new hook\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(null)\n\n  const request = useCallback (async (url, method = 'GET', body = null, headers = {}) => {\n    setLoading(true)\n    try {\n      const response = await fetch(url, {method, body, headers})\n      const data = await response.json()\n\n      // error in response\n      if (!response.ok) {\n        throw new Error (data.message || 'Some error')\n      }\n\n      setLoading(false)\n      return data\n\n    } catch (e) {\n      setLoading(false)\n      setError(e.message)\n      throw e\n    }\n  }, [])\n\n  const clearError = () => setError(null)\n\n  return { loading, error, request, clearError }\n}"]},"metadata":{},"sourceType":"module"}