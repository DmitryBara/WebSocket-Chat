{"ast":null,"code":"var _jsxFileName = \"/Users/dmitry/Desktop/JavaScript/express-chat/client/src/pages/OneChatPage.js\";\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useHttp } from '../hooks/http.hook';\nimport { AuthContext } from '../context/AuthContext';\nimport { Loader } from '../components/LoaderComp';\nimport { ChatWorker } from '../components/ChatWorkerComp'; // Initialize new socket when connect to new chatroom\n// import openSocket from 'socket.io-client'\n// const socket = openSocket()\n// Logic block without component\n\nexport const OneChatPage = () => {\n  const {\n    token\n  } = useContext(AuthContext);\n  const {\n    request,\n    loading\n  } = useHttp();\n  const [chat, setChat] = useState(null);\n  const chatId = useParams().id; // catch param from route\n\n  const [a, setA] = useState(true);\n  setTimeout(() => {\n    setA(false);\n  }, 3000);\n  setTimeout(() => {\n    setA(true);\n  }, 6000);\n  console.log('init'); // Take response with chat data from backend\n  // Put in {chat}\n\n  const getChat = useCallback(async () => {\n    console.log('shitttttt');\n\n    try {\n      const fetched = await request(`/api/chat/chatrooms/${chatId}`, 'GET', null, {\n        Authorization: `Bearer ${token}`\n      });\n      setChat(fetched);\n    } catch (e) {}\n  }, [token, chatId, request]); // call getChat() when component is ready\n\n  useEffect(() => {\n    getChat();\n  }, [getChat]); // if still loading data from backend\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, \"OLOLOLOLO\", a.toString());\n};","map":{"version":3,"sources":["/Users/dmitry/Desktop/JavaScript/express-chat/client/src/pages/OneChatPage.js"],"names":["React","useCallback","useContext","useEffect","useState","useParams","useHttp","AuthContext","Loader","ChatWorker","OneChatPage","token","request","loading","chat","setChat","chatId","id","a","setA","setTimeout","console","log","getChat","fetched","Authorization","e","toString"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,WAAf,EAA4BC,UAA5B,EAAwCC,SAAxC,EAAmDC,QAAnD,QAAkE,OAAlE;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,SAAQC,OAAR,QAAsB,oBAAtB;AACA,SAAQC,WAAR,QAA0B,wBAA1B;AACA,SAAQC,MAAR,QAAqB,0BAArB;AACA,SAAQC,UAAR,QAAyB,8BAAzB,C,CAEA;AACA;AACA;AAGA;;AACA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAE/B,QAAM;AAACC,IAAAA;AAAD,MAAUT,UAAU,CAACK,WAAD,CAA1B;AACA,QAAM;AAACK,IAAAA,OAAD;AAAUC,IAAAA;AAAV,MAAqBP,OAAO,EAAlC;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAMY,MAAM,GAAGX,SAAS,GAAGY,EAA3B,CAL+B,CAKD;;AAG9B,QAAM,CAACC,CAAD,EAAIC,IAAJ,IAAYf,QAAQ,CAAC,IAAD,CAA1B;AACAgB,EAAAA,UAAU,CAAE,MAAM;AAACD,IAAAA,IAAI,CAAC,KAAD,CAAJ;AAAY,GAArB,EAAuB,IAAvB,CAAV;AACAC,EAAAA,UAAU,CAAE,MAAM;AAACD,IAAAA,IAAI,CAAC,IAAD,CAAJ;AAAW,GAApB,EAAsB,IAAtB,CAAV;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAX+B,CAa/B;AACA;;AACA,QAAMC,OAAO,GAAGtB,WAAW,CAAC,YAAY;AACtCoB,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;;AACA,QAAI;AACF,YAAME,OAAO,GAAG,MAAMZ,OAAO,CAC1B,uBAAsBI,MAAO,EADH,EAE3B,KAF2B,EAG3B,IAH2B,EAI3B;AAACS,QAAAA,aAAa,EAAG,UAASd,KAAM;AAAhC,OAJ2B,CAA7B;AAMFI,MAAAA,OAAO,CAACS,OAAD,CAAP;AACC,KARD,CAQE,OAAOE,CAAP,EAAU,CAAE;AACf,GAX0B,EAWxB,CAACf,KAAD,EAAQK,MAAR,EAAgBJ,OAAhB,CAXwB,CAA3B,CAf+B,CA4B/B;;AACAT,EAAAA,SAAS,CAAC,MAAM;AACdoB,IAAAA,OAAO;AACR,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT,CA7B+B,CAiC/B;;AACA,MAAIV,OAAJ,EAAa;AACX,wBAAO,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,sBACE,uDAGIK,CAAC,CAACS,QAAF,EAHJ,CADF;AASD,CA/CM","sourcesContent":["import React, {useCallback, useContext, useEffect, useState} from 'react'\nimport {useParams} from 'react-router-dom'\nimport {useHttp} from '../hooks/http.hook'\nimport {AuthContext} from '../context/AuthContext'\nimport {Loader} from '../components/LoaderComp'\nimport {ChatWorker} from '../components/ChatWorkerComp'\n\n// Initialize new socket when connect to new chatroom\n// import openSocket from 'socket.io-client'\n// const socket = openSocket()\n\n\n// Logic block without component\nexport const OneChatPage = () => {\n\n  const {token} = useContext(AuthContext)\n  const {request, loading} = useHttp()\n  const [chat, setChat] = useState(null)\n  const chatId = useParams().id // catch param from route\n\n\n  const [a, setA] = useState(true)\n  setTimeout( () => {setA(false)}, 3000)\n  setTimeout( () => {setA(true)}, 6000)\n  console.log('init')\n\n  // Take response with chat data from backend\n  // Put in {chat}\n  const getChat = useCallback(async () => {\n    console.log('shitttttt')\n    try {\n      const fetched = await request (\n        `/api/chat/chatrooms/${chatId}`,\n        'GET',\n        null,\n        {Authorization: `Bearer ${token}`}\n      )\n    setChat(fetched) \n    } catch (e) {}\n  }, [token, chatId, request])\n\n  // call getChat() when component is ready\n  useEffect(() => {\n    getChat()\n  }, [getChat])\n\n  // if still loading data from backend\n  if (loading) {\n    return <Loader />\n  }\n\n  return (\n    <>  \n      OLOLOLOLO\n\n      { a.toString()}\n\n      {/* { !loading && chat && <ChatWorker chat={chat} token={token} chatId={chatId}/> } */}\n    </>\n  )\n}"]},"metadata":{},"sourceType":"module"}